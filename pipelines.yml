resources:
  - name: my_repo
    type: GitRepo
    configuration:
      gitProvider: twgithub
      path: jfrogtw/jfrog-pipelines-gitstatus

pipelines:
  - name: git_status_test
    steps:
      ##
      ## Step 1: Execute a simple, always successful test
      ##
      - name: success_test
        type: Bash
        configuration:
          inputResources:
            - name: my_repo
        execution:
          onStart:
            - update_commit_status my_repo --message "starting..." --context "$step_name"
          onExecute:
            - update_commit_status my_repo --message "running..." --context "$step_name"
            - echo "Hello World!"
          onFailure:
            - update_commit_status my_repo --message "Failed!" --context "$step_name"
          onSuccess:
            - update_commit_status my_repo --message "Succeeded :-)" --context "$step_name"
 
      ##
      ## Step 2: Execute a simple, always failing test
      ##
      - name: failure_test
        type: Bash
        configuration:
          inputResources:
            - name: my_repo
              trigger: false
          inputSteps:
            - name: success_test
        execution:
          onStart:
            - update_commit_status my_repo --message "starting..." --context "$step_name"
          onExecute:
            - update_commit_status my_repo --message "running..." --context "$step_name"
            - cd fail               # No such directory -- guaranteed to fail
          onFailure:
            - update_commit_status my_repo --message "Failed!" --context "$step_name"
          onSuccess:
            - update_commit_status my_repo --message "Succeeded :-)" --context "$step_name"
            
  - name: git_status_defaults
    steps:
      ##
      ## Step 1: Execute a simple, always successful test
      ##
      - name: status_update_defaults
        type: Bash
        configuration:
          inputResources:
            - name: my_repo
        execution:
          onStart:
            - update_commit_status my_repo
          onExecute:
            - update_commit_status my_repo
            - echo "Hello World!"
          onFailure:
            - update_commit_status my_repo
          onSuccess:
            - update_commit_status my_repo
            
  - name: git_status_pipeline
    steps:
      - name: gsp_step_1
        type: Bash
        configuration:
          inputResources:
            - name: my_repo
        execution:
          onStart:
            - update_commit_status my_repo --message "starting..." --context "$pipeline_name:$run_number"
          onExecute:
            - echo "Hello World!"
          onFailure:
            - update_commit_status my_repo --message "$step_name failed" --context "$pipeline_name:$run_number"
 
      - name: gsp_step_2
        type: Bash
        configuration:
          inputResources:
            - name: my_repo
              trigger: false
          inputSteps:
            - name: gsp_step_1
        execution:
          onExecute:
            - echo "Hello World!"
          onFailure:
            - update_commit_status my_repo --message "$step_name failed" --context "$pipeline_name:$run_number"
 
      - name: gsp_step_3
        type: Bash
        configuration:
          inputResources:
            - name: my_repo
              trigger: false
          inputSteps:
            - name: gsp_step_2
        execution:
          onExecute:
            - echo "Hello World!"
          onFailure:
            - update_commit_status my_repo --message "$step_name failed" --context "$pipeline_name:$run_number"
          onSuccess:
            - update_commit_status my_repo --message "Build succeeded" --context "$pipeline_name:$run_number"
              
